AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Parameters:
  VpcId:
    Type: String
  PrivateSubnetIds:
    Type: CommaDelimitedList
  DbSecretArn:
    Type: String
  DbHost:
    Type: String
  DbPort:
    Type: String
    Default: "5432"
  DbName:
    Type: String
    Default: "appdb"
  ApprovalQueueUrl:
    Type: String
  ApprovalQueueArn:
    Type: String
  EmailTopicArn:
    Type: String
    Default: ""
  DbSecurityGroupId:
    Type: String
  CreateRequestServiceUrl:
    Type: String
    Description: URL of the CreateRequest service
    Default: "http://localhost:8080"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        DB_SECRET_ARN: !Ref DbSecretArn
        DB_HOST: !Ref DbHost
        DB_PORT: !Ref DbPort
        DB_NAME: !Ref DbName
    VpcConfig:
      SecurityGroupIds: [ !Ref LambdaSecurityGroup ]
      SubnetIds: !Ref PrivateSubnetIds
Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda SG for DB access
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DbIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroupId
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432

  WorkflowAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: [ '*' ]
        AllowHeaders: [ '*' ]
        AllowMethods: [ '*' ]
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '$context.requestId $context.requestTime $context.httpMethod $context.resourcePath $context.status $context.responseLength'

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-workflow-api'
      RetentionInDays: 7

  FinalizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: finalize/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref DbSecretArn

  ResumeWorkflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: resume_workflow/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        ResumeApiPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref WorkflowAPI
            Path: /requests/{taskId}/decision
            Method: POST
        ResumeApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref WorkflowAPI
            Path: /requests/{taskId}/decision
            Method: GET
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref DbSecretArn
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: "*"

  ApprovalStateMachineSpring:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/approval_workflow_spring.asl.json
      DefinitionSubstitutions:
        CreateRequestServiceUrl: !Ref CreateRequestServiceUrl
        FinalizeArn: !GetAtt FinalizeFunction.Arn
        QueueUrl: !Ref ApprovalQueueUrl
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt FinalizeFunction.Arn
            - Effect: Allow
              Action: sqs:SendMessage
              Resource: !Ref ApprovalQueueArn

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  WorkflowApi:
    Description: API Gateway endpoint URL for Workflow API
    Value: !Sub "https://${WorkflowAPI}.execute-api.${AWS::Region}.amazonaws.com/"
  CreateRequestFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt CreateRequestFunctionRole.Arn
  ApprovalStateMachineSpring:
    Description: Spring Boot-based Approval State Machine ARN
    Value: !Ref ApprovalStateMachineSpring
