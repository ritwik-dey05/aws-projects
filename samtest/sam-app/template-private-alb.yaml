AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Core app â€” Lambdas, VPC SG, Workflow HttpApi

Parameters:
  VpcId:
    Type: String
  PrivateSubnetIds:
    Type: CommaDelimitedList
  DbSecretArn:
    Type: String
  DbHost:
    Type: String
  DbPort:
    Type: String
    Default: "5432"
  DbName:
    Type: String
    Default: "appdb"
  DbSecurityGroupId:
    Type: String

Globals:
  Function:
    Timeout: 30
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        DB_SECRET_ARN: !Ref DbSecretArn
        DB_HOST: !Ref DbHost
        DB_PORT: !Ref DbPort
        DB_NAME: !Ref DbName
    VpcConfig:
      SecurityGroupIds: [ !Ref LambdaSecurityGroup ]
      SubnetIds: !Ref PrivateSubnetIds

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda SG for DB access
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DbIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DbSecurityGroupId
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432

  WorkflowAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowHeaders: ['*']
        AllowMethods: ['*']
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '$context.requestId $context.requestTime $context.httpMethod $context.resourcePath $context.status $context.responseLength'

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-workflow-api'
      RetentionInDays: 7

  FinalizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: finalize/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment:
        Variables:
          DEPLOY_TIMESTAMP: "2025-01-27-27-16-45"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref DbSecretArn
    Metadata:
      BuildMethod: python3.12

  ResumeWorkflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: resume_workflow/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Environment:
        Variables:
          DEPLOY_TIMESTAMP: "2025-01-27-16-45"
      Events:
        ResumeApiPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref WorkflowAPI
            Path: /requests/{taskId}/decision
            Method: POST
        ResumeApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref WorkflowAPI
            Path: /requests/{taskId}/decision
            Method: GET
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref DbSecretArn
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: "*"
    Metadata:
      BuildMethod: python3.12

Outputs:
  WorkflowApiUrl:
    Description: Public Workflow API base URL
    Value: !Sub "https://${WorkflowAPI}.execute-api.${AWS::Region}.amazonaws.com/"
    Export:
      Name: WorkflowApiUrl
  FinalizeFunctionArn:
    Description: Finalize Lambda ARN (for SFN)
    Value: !GetAtt FinalizeFunction.Arn
    Export:
      Name: FinalizeFunctionArn
  FinalizeFunctionRoleArn:
    Description: IAM Role for FinalizeFunction
    Value: !GetAtt FinalizeFunctionRole.Arn
  ResumeWorkflowFunctionRoleArn:
    Description: IAM Role for ResumeWorkflowFunction
    Value: !GetAtt ResumeWorkflowFunctionRole.Arn